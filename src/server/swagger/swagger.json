{
	"basePath": "/api/v0",
	"consumes": [
		"application/json"
	],
	"definitions": {
		"ECSignature": {
			"properties": {
				"v": {
					"type": "number",
					"format": "double"
				},
				"r": {
					"type": "string"
				},
				"s": {
					"type": "string"
				}
			},
			"required": [
				"v",
				"r",
				"s"
			],
			"type": "object"
		},
		"SignedOrder": {
			"properties": {
				"ecSignature": {
					"$ref": "#/definitions/ECSignature"
				},
				"maker": {
					"type": "string"
				},
				"taker": {
					"type": "string"
				},
				"makerFee": {
					"type": "string"
				},
				"takerFee": {
					"type": "string"
				},
				"makerTokenAmount": {
					"type": "string"
				},
				"takerTokenAmount": {
					"type": "string"
				},
				"makerTokenAddress": {
					"type": "string"
				},
				"takerTokenAddress": {
					"type": "string"
				},
				"salt": {
					"type": "string"
				},
				"exchangeContractAddress": {
					"type": "string"
				},
				"feeRecipient": {
					"type": "string"
				},
				"expirationUnixTimestampSec": {
					"type": "string"
				}
			},
			"required": [
				"ecSignature",
				"maker",
				"taker",
				"makerFee",
				"takerFee",
				"makerTokenAmount",
				"takerTokenAmount",
				"makerTokenAddress",
				"takerTokenAddress",
				"salt",
				"exchangeContractAddress",
				"feeRecipient",
				"expirationUnixTimestampSec"
			],
			"type": "object"
		},
		"ErrorModel": {
			"properties": {
				"message": {
					"type": "string"
				}
			},
			"required": [
				"message"
			],
			"type": "object"
		},
		"TokenTradeInfo": {
			"properties": {
				"address": {
					"type": "string"
				},
				"minAmount": {
					"type": "string"
				},
				"maxAmount": {
					"type": "string"
				},
				"precision": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"address",
				"minAmount",
				"maxAmount",
				"precision"
			],
			"type": "object"
		},
		"TokenPairTradeInfo": {
			"properties": {
				"tokenA": {
					"$ref": "#/definitions/TokenTradeInfo"
				},
				"tokenB": {
					"$ref": "#/definitions/TokenTradeInfo"
				}
			},
			"required": [
				"tokenA",
				"tokenB"
			],
			"type": "object"
		},
		"Fee": {
			"properties": {
				"feeRecipient": {
					"type": "string"
				},
				"makerFee": {
					"type": "string"
				},
				"takerFee": {
					"type": "string"
				}
			},
			"required": [
				"feeRecipient",
				"makerFee",
				"takerFee"
			],
			"type": "object"
		}
	},
	"info": {
		"title": "Amadeus Relay",
		"version": "0.1.0-alpha",
		"description": "The Amadeus Relay is a relayer working on top of 0x Project (https://0xproject.com). It expects to offer dApps a simple, fast and trustworthy source to use 0x to seamlessly exchange ERC20 tokens. It focus mostly on: provide the most accurate and liquidable market values of assets to dApps willing to use it; and to adhere to the Standard Relayer API (https://github.com/0xProject/standard-relayer-api) so that dApps have a common and knowable interface to work with."
	},
	"paths": {
		"/orders": {
			"get": {
				"operationId": "ListOrders",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SignedOrder"
							}
						},
						"examples": {
							"application/json": {
								"ecSignature": {
									"r": "string",
									"s": "string",
									"v": 0
								},
								"exchangeContractAddress": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"expirationUnixTimestampSec": "1511833100",
								"feeRecipient": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"maker": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"makerFee": "000000000000000001",
								"makerTokenAddress": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"makerTokenAmount": "1000000000000000000",
								"salt": "72190258645710948815942036721950834632004444658131970136856055217425783080581",
								"taker": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"takerFee": "000000000000000001",
								"takerTokenAddress": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"takerTokenAmount": "1000000000000000000"
							}
						}
					},
					"400": {
						"description": "A parameter is not informed correctly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					},
					"500": {
						"description": "An unknown error occurred.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				},
				"description": "Calling this method will return signed orders that can be filled through 0x project's fillOrder to exchange user's takerToken for this relayer's makerToken.\r\nThis method follows the specifications of the Standard Relayer API v0 as proposed by the 0x Projext team (https://github.com/0xProject/standard-relayer-api).",
				"summary": "List all orders available through our relayer, given the searched parameters.",
				"security": [],
				"parameters": [
					{
						"description": "Will return all orders created to this contract address.",
						"in": "query",
						"name": "exchangeContractAddress",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where makerTokenAddress or takerTokenAddress is token address.",
						"in": "query",
						"name": "tokenAddress",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where makerTokenAddress is the same address of this parameter.",
						"in": "query",
						"name": "makerTokenAddress",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where takerTokenAddress is the same address of this parameter.",
						"in": "query",
						"name": "takerTokenAddress",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where makerAddress is the same address of this parameter.",
						"in": "query",
						"name": "maker",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where takerAddress is the same address of this parameter.",
						"in": "query",
						"name": "taker",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where makerAddress or takerAddress is the same address of this parameter.",
						"in": "query",
						"name": "trader",
						"required": false,
						"type": "string"
					},
					{
						"description": "Will return all orders where feeRecipient is the same address of this parameter.",
						"in": "query",
						"name": "feeRecipient",
						"required": false,
						"type": "string"
					},
					{
						"description": "Which page should be returned. If this parameter is not informed, then it will take the default value of 1. Page numbers start at 1.",
						"in": "query",
						"name": "page",
						"required": false,
						"format": "double",
						"type": "number"
					},
					{
						"description": "Number of orders that should be returned on each page. If this parameter is not informed, then it will take the default value of the total number of orders found.",
						"in": "query",
						"name": "per_page",
						"required": false,
						"format": "double",
						"type": "number"
					}
				]
			}
		},
		"/token_pairs": {
			"get": {
				"operationId": "ListPairs",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TokenPairTradeInfo"
							}
						},
						"examples": {
							"application/json": {
								"tokenA": {
									"address": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
									"maxAmount": "1000000000000000000",
									"minAmount": "000000000000000001",
									"precision": 6
								},
								"tokenB": {
									"address": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
									"maxAmount": "1000000000000000000",
									"minAmount": "000000000000000001",
									"precision": 6
								}
							}
						}
					},
					"400": {
						"description": "A parameter is not informed correctly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					},
					"500": {
						"description": "An unknown error occurred.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				},
				"description": "This method follows the specifications of the Standard Relayer API v0 as proposed by the 0x Projext team (https://github.com/0xProject/standard-relayer-api).",
				"summary": "Lists all available trading pairs that this relayer current supports.",
				"security": [],
				"parameters": [
					{
						"description": "Address of a token that could be on either side of the trade: either as a maker, or as a taker.",
						"in": "query",
						"name": "tokenA",
						"required": false,
						"type": "string"
					},
					{
						"description": "Address of a token that could be on either side of the trade: either as a maker, or as a taker.",
						"in": "query",
						"name": "tokenB",
						"required": false,
						"type": "string"
					},
					{
						"description": "Which page should be returned. If this parameter is not informed, then it will take the default value of 1. Page numbers start at 1.",
						"in": "query",
						"name": "page",
						"required": false,
						"format": "double",
						"type": "number"
					},
					{
						"description": "Number of token pairs that should be returned on each page. If this parameter is not informed, then it will take the default value of the total number of token pairs found.",
						"in": "query",
						"name": "per_page",
						"required": false,
						"format": "double",
						"type": "number"
					}
				]
			}
		},
		"/fees": {
			"post": {
				"operationId": "CalculateFee",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/Fee"
						},
						"examples": {
							"application/json": {
								"feeRecipient": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"makerFee": "000000000000000001",
								"takerFee": "000000000000000001"
							}
						}
					},
					"400": {
						"description": "A parameter is not informed correctly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					},
					"500": {
						"description": "An unknown error occurred.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				},
				"description": "This method follows the specifications of the Standard Relayer API v0 as proposed by the 0x Projext team (https://github.com/0xProject/standard-relayer-api).",
				"summary": "Given an unsigned order without the fee-related properties, returns the required feeRecipient, makerFee, and takerFee of that order.",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"schema": {
							"properties": {
								"exchangeContractAddress": {
									"type": "string",
									"description": "Will validate this contract address to calculate fee."
								},
								"makerTokenAddress": {
									"type": "string",
									"description": "Will calculate maker fee based on this maker token address price."
								},
								"takerTokenAddress": {
									"type": "string",
									"description": "Will calculate taker fee based on this taker token address price."
								},
								"maker": {
									"type": "string",
									"description": "Will validate this maker address to calculate fee."
								},
								"taker": {
									"type": "string",
									"description": "Will validate this taker address to calculate fee, and it has to be the relayer address."
								},
								"makerTokenAmount": {
									"type": "string",
									"description": "Will calculate convertion price based on this maker token amount, and will use it to calculate fee."
								},
								"takerTokenAmount": {
									"type": "string",
									"description": "Will calculate convertion price based on this taker token amount, and will use it to calculate fee."
								},
								"expirationUnixTimestampSec": {
									"type": "string",
									"description": "Will validate the expiration time to calculate fee."
								},
								"salt": {
									"type": "string",
									"description": "Will validate this unique number to calculate fee."
								}
							},
							"title": "CalculateFeeBody",
							"type": "object",
							"required": [
								"exchangeContractAddress",
								"makerTokenAddress",
								"takerTokenAddress",
								"maker",
								"taker",
								"makerTokenAmount",
								"takerTokenAmount",
								"expirationUnixTimestampSec",
								"salt"
							]
						}
					}
				]
			}
		},
		"/order": {
			"post": {
				"operationId": "PostOrder",
				"produces": [
					"application/json"
				],
				"responses": {
					"204": {
						"description": "No content",
						"examples": {
							"application/json": {
								"ecSignature": {
									"r": "string",
									"s": "string",
									"v": 0
								},
								"exchangeContractAddress": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"expirationUnixTimestampSec": "1511833100",
								"feeRecipient": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"maker": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"makerFee": "000000000000000001",
								"makerTokenAddress": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"makerTokenAmount": "1000000000000000000",
								"salt": "72190258645710948815942036721950834632004444658131970136856055217425783080581",
								"taker": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"takerFee": "000000000000000001",
								"takerTokenAddress": "0x23d4fe8c00ae3b267ea349eed18ed32b71c93f4d",
								"takerTokenAmount": "1000000000000000000"
							}
						}
					},
					"400": {
						"description": "A parameter is not informed correctly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					},
					"500": {
						"description": "An unknown error occurred.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				},
				"description": "This method allows signed orders to be submited to our relayer.\nThis method follows the specifications of the Standard Relayer API v0 as proposed by the 0x Projext team (https://github.com/0xProject/standard-relayer-api).",
				"summary": "Submit a signed order to our relayer.",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "signedOrder",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SignedOrder"
						}
					}
				]
			}
		}
	},
	"produces": [
		"application/json"
	],
	"swagger": "2.0",
	"securityDefinitions": {}
}